### ASSIGNMENT 1 ###

# importing libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# loading the dataset
university_df = pd.read_csv("https://raw.githubusercontent.com/sarahjaynebyrne/ADS1_assignment1/code/disciplines.csv?token=AWICDHVSEI7QDJ7YXC7QSH3BSZTAO")

## DATA PRE-PROCESSING 

def pre_processing(x):
    '''
    Parameters
    ----------
    x : dataset, performing functions described below on the dataset
    Returns
    -------
    the column values with ',' replaced and 
    stored as an int value
    '''
    head = x.head()             # displaying the first 5 lines in the data
    tail = x.tail()             # displaying the last 5 lines in the data
    columns = x.columns         # name of columns in dataset
    describe = x.describe       # general statistics on the dataset 
    info = x.info               # general statistics on the dataset 
    null = x.isna().sum()       # any nan values in columns of dataset
    dtype = x.dtypes            # data types of the columns in the dataset

    return (f'The top 5 columns in the dataset = \n {head} \n \
            The bottom 5 columns in the dataset = \n {tail} \n \
            The name of the columns in the dataset = \n {columns} \n \
            The statistic description of the dataset = \n {describe} \n \
            The information on the dataset = \n {info} \n \
            The presence of any NA values = \n {null} \n \
            The datatype of the columns in the dataset = \n {dtype}') 

print(pre_processing(university_df))


'''
All the data columns are objects. 
However, the columns contain numerical values and thus, 
these need changing to int data type values.
The values contain commas ',' and these need to be removed also.
'''

def convert(x):
    '''
    Parameters
    ----------
    x : columns in dataset, replace ',' with ''

    Returns
    -------
    the column values with ',' replaced and 
    stored as an int value
    '''
    new = x.replace(",", "")
    return int(new)

# re-loading data in 
university_df = pd.read_csv("C:/Users/sjjby/Documents/Applied Data Science 1/Assignment 1/disciplines.csv",
                            converters = {'England': convert,
                                          'Scotland': convert,
                                          'Wales': convert,
                                          'Northern Ireland': convert,
                                          'Other UK': convert,
                                          'Total UK': convert,
                                          'Total Non-UK': convert,
                                          'Other European Union': convert,
                                          'Non-European Union': convert,
                                          'Total': convert})

# checking the data types had changed
print(university_df.dtypes)

## adding columns from another data set
gender_df = pd.read_csv("C:/Users/sjjby/Documents/Applied Data Science 1/Assignment 1/female and male.csv")

# running pre-processing function on data
print(pre_processing(gender_df))

# changing the data type as previously stored as objects using convert function to change to float
gender_df = pd.read_csv("https://raw.githubusercontent.com/sarahjaynebyrne/ADS1_assignment1/code/female%20and%20male.csv?token=AWICDHXPZZXOALPG45MPLKLBSZTPI",
                        converters = {'Female': convert,
                                      'Male': convert,
                                      'Other': convert})

# add female, male, and other (genders) column to current university data set
university_df['Female'] = pd.Series(gender_df['Female'])
university_df['Male'] = pd.Series(gender_df['Male'])
university_df['Other'] = pd.Series(gender_df['Other'])



########### DATA VISUALISATION ###

### INVESTIGATING PLACE OF ORIGIN AND STEM/ NON-STEM ###

## PYRAMID PLOT - FIGURE 1

#copy original dataframe

university_dfa = university_df.copy()

university_dfa.drop(columns = ['Subject of study', 
                               'Total UK',
                               'Total Non-UK',
                               'Total',
                               'Female',
                               'Male',
                               'Other'],
                    inplace = True)

#define x and y limits
y = list(university_dfa.columns.values.tolist())
x_stem = university_dfa.iloc[13]
x_nonstem = university_dfa.iloc[25]

#define plot parameters
fig, axs = plt.subplots(ncols = 2, 
                         sharey = True, 
                         figsize = (9, 6))

#specify background color and plot title
fig.patch.set_facecolor('xkcd:light grey')

#define stem and non-stem bars
axs[0].barh(y, 
             x_stem, 
             align = 'center', 
             color = 'navy')
axs[0].set(title = 'STEM')
axs[1].barh(y, 
             x_nonstem, 
             align = 'center', 
             color = 'cornflowerblue')
axs[1].set(title = 'Non-STEM')

#adjust grid parameters and specify labels for y-axis
axs[1].grid()
axs[0].invert_xaxis()
axs[0].grid()

#display plot
plt.show()

## MAPPING - FIGURE 2

    # showing subplots of 

# importing UK image
with plt.cbook.get_sample_data('C:/Users/sjjby/Documents/Applied Data Science 1/Assignment 1/map of UK.jpg') as image_file:
    image = plt.imread(image_file)

#defining percentage function
def percentage(x, y):
    '''
    Parameters
    ----------
    x : first number
    y: second number
    percentage: finds the percentage of two numbers by
    performing x/y multiplied by 100.
    Returns
    -------
    the column values with ',' replaced and 
    stored as an int value
    '''
    percentage = 100 * float(x)/float(y)
    return str("%.2f" % percentage) + "%"
'''
finding the percentage of the columns:
'England', 'Wales', 'Scotland' and
'Northern Ireland'
'''
england_label = str(percentage(university_df['England'][13], 
                           university_df['England'][26]))
wales_label = str(percentage(university_df['Wales'][13], 
                         university_df['Wales'][26]))
scotland_label = str(percentage(university_df['Scotland'][13], 
                            university_df['Scotland'][26]))
northire_label = str(percentage(university_df['Northern Ireland'][13], 
                            university_df['Northern Ireland'][26]))
# defining x co-ordinates for map
x = [550,
     750,
     500,
     300]

# defining y co-ordinates for map
y = [1050,
     900,
     550,
     775]

# defining the labels (x,y) text for the map
label = [(wales_label),
         (england_label),
         (scotland_label),
         (northire_label)]

# define figure 
fig, axs = plt.subplots()

# load image onto the axes
axs.imshow(image)
axs.scatter(x, y)

# plotting the markers along with text
for i, txt in enumerate(label):
    axs.annotate(txt, 
                (x[i], y[i]),
                color = 'black')

# define legend and title
axs.axis('off') # clear x-axis and y-axis
axs.set_title('UK percentage of STEM Students by Country')


## COPYING ORIGINAL DATA SET ##

#copy of original data
university_df2 = university_df.copy()
print(university_df2.dtypes)

#removing the rows 
university_df2.drop(labels = [13, 25, 26],
                    axis = 0,
                    inplace = True)
print(university_df2)

#add discipline rows into dataframe 
stem_vals = ['Stem',
             'Stem',
             'Stem',
             'Stem',
             'Stem',
             'Stem',
             'Stem',
             'Stem',
             'Stem',
             'Stem',
             'Stem',
             'Stem',
             'Stem',
             'Non-Stem',
             'Non-Stem',
             'Non-Stem',
             'Non-Stem',
             'Non-Stem',
             'Non-Stem',
             'Non-Stem',
             'Non-Stem',
             'Non-Stem',
             'Non-Stem',
             'Non-Stem']

# inserting new column into original data set in index 1
university_df2.insert(loc = 1,
                      column = 'Discipline',
                      value = stem_vals)

#ensuring the new column has been added
print(university_df2.dtypes)


## FIGURE 3

# the total number of stem and non-stem courses offered

# variables for bar chart
course_type = university_df2.groupby('Discipline')[['Total']].count()
print(course_type)
labels = ['Non-Stem', 'Stem']
width = 0.7
colors = ['cornflowerblue', 'lightblue']

#variables for pie chart
students_by_discipline = university_df2.groupby('Discipline')[['Total']].sum()
explode = [0.1, 0.1]

# plot figure space
fig, axs = plt.subplots(nrows = 1, ncols = 2, figsize = (20, 10))

# the data to go onto the axis and figure defined

# bar chart
axs[0].bar(labels,
           course_type['Total'],
           width,
           color = colors)

# pie chart 
axs[1].pie(students_by_discipline['Total'],
           colors = colors,
           labels = labels,
           pctdistance = 0.5,
           shadow = True,
           autopct = '%1.1f%%',
           textprops = {'fontsize': 20},
           startangle = 90,
           explode = explode)

# title and axis labels
axs[0].set_xlabel('Discipline of courses',
                  fontsize = 20)
axs[0].set_ylabel('Number of courses',
                  fontsize = 20)
axs[0].set_title('The total number of STEM and Non-STEM  \n courses offered at university',
                 fontsize = 20)

axs[1].set_title("Total Number of Students studying STEM \n and Non-STEM courses",
                 fontsize = 20)

plt.show()


## STACKED BAR CHART - FIGURE 4

    # where students come from to study each discipline

# define labels 
UK = (university_df2['England']
      + university_df2['Scotland']
      + university_df2['Wales']
      + university_df2['Northern Ireland']
      + university_df2['Other UK'])
EU = university_df2['Other European Union']
non_EU = university_df2['Non-European Union']
label2 = ['Place of Origin']
label = (university_df2['Subject of study'])
width = 0.4

# subplot layout
fig, axs = plt.subplots(figsize = (30, 10))

# set grid
axs.set_axisbelow(True)
axs.minorticks_on()
axs.grid(which = 'minor',
         color = 'grey',
         linestyle = '--',
         linewidth = '1.5')
axs.grid(which = 'major',
         color = 'black',
         linestyle = '--',
         linewidth = '2')

# plot bars
axs.bar(label, 
        UK, 
        width,
        color = 'aliceblue',
        label = 'UK')
axs.bar(label, 
        EU, 
        width,
        color = 'lightskyblue',
        bottom = UK,
        label = 'European Union')
axs.bar(label, 
        non_EU, 
        width,
        color = 'navy',
        bottom = np.array(UK) + np.array(EU),
        label = 'Non-European Union')

# define boundaries, labels 
axs.set_ylabel('Number of Students',
               fontsize = 15)
axs.set_xlabel('Subject of Study',
               fontsize = 15)
axs.legend(loc = 'upper right')
plt.xticks(rotation = 90)
plt.ylim([0, 500000])
plt.title('The place of origin and the respective number of students attending university',
          fontsize = 20)

plt.show()





### INVESTIGATING GENDER AND STEM ###


## PIE CHARTS - FIGURE 6

# define pie chart variables
female_students_by_discipline = university_df2.groupby('Discipline')[['Female']].sum()
male_students_by_discipline = university_df2.groupby('Discipline')[['Male']].sum()
others_students_by_discipline = university_df2.groupby('Discipline')[['Other']].sum()

# define labels 
labels = ['Non-Stem', 'Stem']
explode = [0.1, 0.1]

# make figure and axes
fig, axs = plt.subplots(3, 1, figsize = (10, 10))

# define pie charts
axs[0].pie(female_students_by_discipline['Female'],
        colors = ['pink', 'deeppink'],
        labels = labels,
        pctdistance = 0.5,
        shadow = True,
        autopct = '%1.1f%%',
        startangle = 90,
        explode = explode)

axs[1].pie(male_students_by_discipline['Male'],
        colors = ['cornflowerblue', 'lightblue'],
        labels = labels,
        pctdistance = 0.5,
        shadow = True,
        autopct = '%1.1f%%',
        startangle = 90,
        explode = explode)

axs[2].pie(others_students_by_discipline['Other'],
        colors = ['mediumorchid', 'orchid'],
        labels = labels,
        pctdistance = 0.5,
        shadow = True,
        autopct = '%1.1f%%',
        startangle = 90,
        explode = explode)

# define pie chart titles
axs[0].set_title("Female")
axs[1].set_title("Male")
axs[2].set_title("Other")

# showing the pie chart subplots
plt.show()


## HYPOTHESIS TESTING  

'''
perform a chi-squared test to see if there exists a significant
difference in the distribution across stem and non-stem disciplines
and the sexes. 

research question: Are the proportion of males and females equal
in both stem and non-stem groups?

H0 = studying stem or non-stem degrees is independant on gender
H1 = studying stem or non-stem degrees is dependant on gender 
'''

from scipy.stats import chi2
from scipy.stats import chi2_contingency

# define data values -  extrapolated from grouby function
data = {'Female': [847685, 593125],
        'Male': [545210, 542495]}

# define dataframe to apply chi-squared
df_chi = pd.DataFrame(data,
                      index = ['Non-Stem', 'Stem'])
print(df_chi)

# chi-squared test
stat, p, dof, expected = chi2_contingency(df_chi)
print(chi2_contingency(df_chi))
print('dof = %d' % dof)

# interpret chi-squared test statistic
prob = 0.95
critical = chi2.ppf(prob, dof)

print('probability = %.3f, critical = %.3f, stat = %.3f' % (prob, critical, stat))

if abs(stat) >= critical:
    print('significant result, reject null hypothesis (H0), dependent.')
else:
    print('not significant result, fail to reject null hypothesis (H0), independent.')

# p-value interpretation 
alpha = 1 - prob

print('significance = %.3f, p = %.3f' % (alpha, p))

if p <= alpha:
    print('significant result, reject null hypothesis (H0), dependent.')
else:
    print('not significant result, fail to reject null hypothesis (H0), independent')


## HEATMAP - FIGURE 5

# importing library for heatmap
import seaborn as sns

# removing columns not desired for heatmap
university_df2.drop(columns = ['Subject of study', 
                               'Discipline',
                               'Total UK',
                               'Total Non-UK',
                               'Female',
                               'Male',
                               'Other',
                               'Total'],
                    inplace = True)

# define figure
fig, axs = plt.subplots(figsize = (15, 10))

# the heatmap
heatmap = sns.heatmap(university_df2,
                      cmap = "Blues",    # colour scheme of heatmap
                      annot = False,    # annotation is false
                      linecolor = 'grey', # define linecolour
                      linewidths = 0.5,  # set line width
                      cbar_kws = {'label': 'Number of Students'}) #labeling colorbar

labels = ['England'
          'Wales',
          'Scotland',
          'Northern Ireland',
          'Other UK',
          'Other European Union',
          'Non-European Union',
          'Not known']

# set labels and ticks
plt.xlabel("Place of origin")
plt.xticks(rotation = 90)
plt.ylabel("Subject of Study")

plt.show
